
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programAND ASSIGN CHAR CHARCON COMMA DIVIDE ELSE EQ EXIT FLOAT FLOATCON GE GT IDENTIFIER IF INT INTCON LBRACE LBRACKET LE LPAREN LT MINUS NE NOT OR PLUS RBRACE RBRACKET READ RETURN RPAREN SEMICOLON STRING TIMES VOID WHILE WRITEprogram : proceduresprogram : declList proceduresprocedures : procedures procedureDeclprocedures : procedureDecldeclList : type identifierList SEMICOLONdeclList : declList type identifierList SEMICOLONprocedureDecl : procedureHead procedureBodyprocedureHead : functionDecl declListprocedureHead : functionDeclfunctionDecl : type IDENTIFIER LPAREN paramDeclList RPAREN LBRACEfunctionDecl : type IDENTIFIER LPAREN RPAREN LBRACEprocedureBody : statementList RBRACEparamDeclList : type varDeclparamDeclList : paramDeclList COMMA type varDeclidentifierList : varDeclidentifierList : identifierList COMMA varDeclvarDecl : IDENTIFIERvarDecl : IDENTIFIER LBRACKET INTCON RBRACKETvarDecl : IDENTIFIER LBRACKET CHARCON RBRACKETtype  : CHARtype  : INTtype : FLOATtype : VOIDstatement \t: assignmentstatement \t: ifStatementstatement \t: whileStatementstatement \t: ioStatementstatement \t: returnStatementstatement \t: exitStatementstatement \t: compoundStatementstatement : callStatementcallStatement \t: IDENTIFIER LPAREN RPAREN SEMICOLONcallStatement \t: IDENTIFIER LPAREN argList RPAREN SEMICOLONassignment  : variable_def ASSIGN expr SEMICOLONvariable_def \t: IDENTIFIERvariable_def \t: IDENTIFIER LBRACKET expr RBRACKETifStatement\t: IF testAndThen ELSE compoundStatementifStatement : IF testAndThentestAndThen\t: test compoundStatementtest\t\t: LPAREN expr RPARENwhileStatement  : WHILE whileExpr statementwhileExpr\t: LPAREN expr RPARENioStatement     : READ LPAREN variable_def RPAREN SEMICOLONioStatement : WRITE LPAREN expr RPAREN SEMICOLONioStatement : WRITE LPAREN stringConstant RPAREN SEMICOLONreturnStatement : RETURN expr SEMICOLONexitStatement \t: EXIT SEMICOLONcompoundStatement \t: LBRACE statementList RBRACEstatementList   : statementstatementList : statementList statementexpr : simpleExprexpr : expr OR simpleExprexpr : expr AND simpleExprexpr : NOT simpleExprsimpleExpr\t: addExprsimpleExpr\t: simpleExpr EQ addExprsimpleExpr\t: simpleExpr NE addExprsimpleExpr\t: simpleExpr LE addExprsimpleExpr\t: simpleExpr LT addExprsimpleExpr\t: simpleExpr GE addExprsimpleExpr\t: simpleExpr GT addExpraddExpr\t\t:  mulExpraddExpr :  addExpr PLUS mulExpraddExpr :  addExpr MINUS mulExprmulExpr\t:  factormulExpr\t:  mulExpr TIMES factormulExpr\t:  mulExpr DIVIDE factorfactor  : variablefactor  : constantfactor  : IDENTIFIER LPAREN RPARENfactor  : IDENTIFIER LPAREN argList RPARENfactor  : LPAREN expr RPARENvariable \t: IDENTIFIERvariable \t: IDENTIFIER LBRACKET expr RBRACKETstringConstant : STRINGconstant : FLOATCONconstant : INTCONconstant : CHARCONargList : exprargList : argList COMMA expr'
    
_lr_action_items = {'CHAR':([0,2,3,4,11,12,14,19,39,43,45,47,76,118,119,149,],[7,7,7,-4,7,-3,7,-7,7,-5,7,-12,-6,7,-11,-10,]),'INT':([0,2,3,4,11,12,14,19,39,43,45,47,76,118,119,149,],[8,8,8,-4,8,-3,8,-7,8,-5,8,-12,-6,8,-11,-10,]),'FLOAT':([0,2,3,4,11,12,14,19,39,43,45,47,76,118,119,149,],[9,9,9,-4,9,-3,9,-7,9,-5,9,-12,-6,9,-11,-10,]),'VOID':([0,2,3,4,11,12,14,19,39,43,45,47,76,118,119,149,],[10,10,10,-4,10,-3,10,-7,10,-5,10,-12,-6,10,-11,-10,]),'$end':([1,2,4,12,14,19,47,],[0,-1,-4,-3,-2,-7,-12,]),'IDENTIFIER':([5,6,7,8,9,10,11,13,15,20,21,22,23,24,25,26,27,28,29,35,37,39,40,43,44,48,49,50,52,53,54,55,56,59,66,70,71,72,73,74,76,78,85,87,94,95,96,97,98,99,100,101,102,104,105,106,107,108,109,111,119,122,123,125,145,147,149,150,151,152,153,156,],[17,38,-20,-21,-22,-23,-9,41,17,38,-49,-24,-25,-26,-27,-28,-29,-30,-31,65,38,-8,75,-5,75,-50,65,-38,65,38,65,90,65,65,65,-47,38,65,65,75,-6,75,-39,-41,-46,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-48,-11,-34,-37,-42,-32,65,-10,75,-43,-44,-45,-33,]),'IF':([6,11,20,21,22,23,24,25,26,27,28,29,37,39,43,48,50,53,70,71,76,85,87,94,111,119,122,123,125,145,149,151,152,153,156,],[31,-9,31,-49,-24,-25,-26,-27,-28,-29,-30,-31,31,-8,-5,-50,-38,31,-47,31,-6,-39,-41,-46,-48,-11,-34,-37,-42,-32,-10,-43,-44,-45,-33,]),'WHILE':([6,11,20,21,22,23,24,25,26,27,28,29,37,39,43,48,50,53,70,71,76,85,87,94,111,119,122,123,125,145,149,151,152,153,156,],[32,-9,32,-49,-24,-25,-26,-27,-28,-29,-30,-31,32,-8,-5,-50,-38,32,-47,32,-6,-39,-41,-46,-48,-11,-34,-37,-42,-32,-10,-43,-44,-45,-33,]),'READ':([6,11,20,21,22,23,24,25,26,27,28,29,37,39,43,48,50,53,70,71,76,85,87,94,111,119,122,123,125,145,149,151,152,153,156,],[33,-9,33,-49,-24,-25,-26,-27,-28,-29,-30,-31,33,-8,-5,-50,-38,33,-47,33,-6,-39,-41,-46,-48,-11,-34,-37,-42,-32,-10,-43,-44,-45,-33,]),'WRITE':([6,11,20,21,22,23,24,25,26,27,28,29,37,39,43,48,50,53,70,71,76,85,87,94,111,119,122,123,125,145,149,151,152,153,156,],[34,-9,34,-49,-24,-25,-26,-27,-28,-29,-30,-31,34,-8,-5,-50,-38,34,-47,34,-6,-39,-41,-46,-48,-11,-34,-37,-42,-32,-10,-43,-44,-45,-33,]),'RETURN':([6,11,20,21,22,23,24,25,26,27,28,29,37,39,43,48,50,53,70,71,76,85,87,94,111,119,122,123,125,145,149,151,152,153,156,],[35,-9,35,-49,-24,-25,-26,-27,-28,-29,-30,-31,35,-8,-5,-50,-38,35,-47,35,-6,-39,-41,-46,-48,-11,-34,-37,-42,-32,-10,-43,-44,-45,-33,]),'EXIT':([6,11,20,21,22,23,24,25,26,27,28,29,37,39,43,48,50,53,70,71,76,85,87,94,111,119,122,123,125,145,149,151,152,153,156,],[36,-9,36,-49,-24,-25,-26,-27,-28,-29,-30,-31,36,-8,-5,-50,-38,36,-47,36,-6,-39,-41,-46,-48,-11,-34,-37,-42,-32,-10,-43,-44,-45,-33,]),'LBRACE':([6,11,20,21,22,23,24,25,26,27,28,29,37,39,43,48,50,51,53,70,71,76,80,84,85,87,94,111,117,119,122,123,124,125,145,149,151,152,153,156,],[37,-9,37,-49,-24,-25,-26,-27,-28,-29,-30,-31,37,-8,-5,-50,-38,37,37,-47,37,-6,119,37,-39,-41,-46,-48,149,-11,-34,-37,-40,-42,-32,-10,-43,-44,-45,-33,]),'SEMICOLON':([16,17,18,36,42,57,58,60,61,62,63,64,65,67,68,69,75,77,83,103,112,120,121,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,144,146,154,155,],[43,-17,-15,70,76,94,-51,-55,-62,-65,-68,-69,-73,-76,-77,-78,-17,-16,122,-54,145,-18,-19,151,152,153,-52,-53,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,-72,156,-71,-74,]),'COMMA':([16,17,18,42,58,60,61,62,63,64,65,67,68,69,75,77,79,103,113,114,116,120,121,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,154,155,157,158,],[44,-17,-15,44,-51,-55,-62,-65,-68,-69,-73,-76,-77,-78,-17,-16,118,-54,147,-79,-13,-18,-19,-52,-53,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,147,-72,-71,-74,-80,-14,]),'LPAREN':([17,31,32,33,34,35,38,41,49,52,54,56,59,65,66,72,73,95,96,97,98,99,100,101,102,104,105,106,107,108,109,147,],[45,52,54,55,56,66,72,45,66,66,66,66,66,108,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'LBRACKET':([17,38,65,75,90,],[46,73,109,46,73,]),'RBRACE':([20,21,22,23,24,25,26,27,28,29,48,50,70,71,85,87,94,111,122,123,145,151,152,153,156,],[47,-49,-24,-25,-26,-27,-28,-29,-30,-31,-50,-38,-47,111,-39,-41,-46,-48,-34,-37,-32,-43,-44,-45,-33,]),'ASSIGN':([30,38,148,],[49,-35,-36,]),'NOT':([35,49,52,54,56,66,72,73,108,109,147,],[59,59,59,59,59,59,59,59,59,59,59,]),'FLOATCON':([35,49,52,54,56,59,66,72,73,95,96,97,98,99,100,101,102,104,105,106,107,108,109,147,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'INTCON':([35,46,49,52,54,56,59,66,72,73,95,96,97,98,99,100,101,102,104,105,106,107,108,109,147,],[68,81,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'CHARCON':([35,46,49,52,54,56,59,66,72,73,95,96,97,98,99,100,101,102,104,105,106,107,108,109,147,],[69,82,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'RPAREN':([45,58,60,61,62,63,64,65,67,68,69,72,75,79,86,88,89,90,91,92,93,103,108,110,113,114,116,120,121,129,130,131,132,133,134,135,136,137,138,139,140,141,142,144,148,154,155,157,158,],[80,-51,-55,-62,-65,-68,-69,-73,-76,-77,-78,112,-17,117,124,125,126,-35,127,128,-75,-54,141,144,146,-79,-13,-18,-19,-52,-53,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,154,-72,-36,-71,-74,-80,-14,]),'ELSE':([50,85,111,],[84,-39,-48,]),'STRING':([56,],[93,]),'OR':([57,58,60,61,62,63,64,65,67,68,69,83,86,88,91,103,110,114,115,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,154,155,157,],[95,-51,-55,-62,-65,-68,-69,-73,-76,-77,-78,95,95,95,95,-54,95,95,95,-52,-53,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,95,-72,-71,-74,95,]),'AND':([57,58,60,61,62,63,64,65,67,68,69,83,86,88,91,103,110,114,115,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,154,155,157,],[96,-51,-55,-62,-65,-68,-69,-73,-76,-77,-78,96,96,96,96,-54,96,96,96,-52,-53,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,96,-72,-71,-74,96,]),'RBRACKET':([58,60,61,62,63,64,65,67,68,69,81,82,103,115,129,130,131,132,133,134,135,136,137,138,139,140,141,143,144,154,155,],[-51,-55,-62,-65,-68,-69,-73,-76,-77,-78,120,121,-54,148,-52,-53,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,155,-72,-71,-74,]),'EQ':([58,60,61,62,63,64,65,67,68,69,103,129,130,131,132,133,134,135,136,137,138,139,140,141,144,154,155,],[97,-55,-62,-65,-68,-69,-73,-76,-77,-78,97,97,97,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,-72,-71,-74,]),'NE':([58,60,61,62,63,64,65,67,68,69,103,129,130,131,132,133,134,135,136,137,138,139,140,141,144,154,155,],[98,-55,-62,-65,-68,-69,-73,-76,-77,-78,98,98,98,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,-72,-71,-74,]),'LE':([58,60,61,62,63,64,65,67,68,69,103,129,130,131,132,133,134,135,136,137,138,139,140,141,144,154,155,],[99,-55,-62,-65,-68,-69,-73,-76,-77,-78,99,99,99,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,-72,-71,-74,]),'LT':([58,60,61,62,63,64,65,67,68,69,103,129,130,131,132,133,134,135,136,137,138,139,140,141,144,154,155,],[100,-55,-62,-65,-68,-69,-73,-76,-77,-78,100,100,100,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,-72,-71,-74,]),'GE':([58,60,61,62,63,64,65,67,68,69,103,129,130,131,132,133,134,135,136,137,138,139,140,141,144,154,155,],[101,-55,-62,-65,-68,-69,-73,-76,-77,-78,101,101,101,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,-72,-71,-74,]),'GT':([58,60,61,62,63,64,65,67,68,69,103,129,130,131,132,133,134,135,136,137,138,139,140,141,144,154,155,],[102,-55,-62,-65,-68,-69,-73,-76,-77,-78,102,102,102,-56,-57,-58,-59,-60,-61,-63,-64,-66,-67,-70,-72,-71,-74,]),'PLUS':([60,61,62,63,64,65,67,68,69,131,132,133,134,135,136,137,138,139,140,141,144,154,155,],[104,-62,-65,-68,-69,-73,-76,-77,-78,104,104,104,104,104,104,-63,-64,-66,-67,-70,-72,-71,-74,]),'MINUS':([60,61,62,63,64,65,67,68,69,131,132,133,134,135,136,137,138,139,140,141,144,154,155,],[105,-62,-65,-68,-69,-73,-76,-77,-78,105,105,105,105,105,105,-63,-64,-66,-67,-70,-72,-71,-74,]),'TIMES':([61,62,63,64,65,67,68,69,137,138,139,140,141,144,154,155,],[106,-65,-68,-69,-73,-76,-77,-78,106,106,-66,-67,-70,-72,-71,-74,]),'DIVIDE':([61,62,63,64,65,67,68,69,137,138,139,140,141,144,154,155,],[107,-65,-68,-69,-73,-76,-77,-78,107,107,-66,-67,-70,-72,-71,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'procedures':([0,3,],[2,14,]),'declList':([0,11,],[3,39,]),'procedureDecl':([0,2,3,14,],[4,12,4,12,]),'type':([0,2,3,11,14,39,45,118,],[5,13,15,40,13,74,78,150,]),'procedureHead':([0,2,3,14,],[6,6,6,6,]),'functionDecl':([0,2,3,14,],[11,11,11,11,]),'identifierList':([5,15,40,74,],[16,42,16,42,]),'varDecl':([5,15,40,44,74,78,150,],[18,18,18,77,18,116,158,]),'procedureBody':([6,],[19,]),'statementList':([6,37,],[20,71,]),'statement':([6,20,37,53,71,],[21,48,21,87,48,]),'assignment':([6,20,37,53,71,],[22,22,22,22,22,]),'ifStatement':([6,20,37,53,71,],[23,23,23,23,23,]),'whileStatement':([6,20,37,53,71,],[24,24,24,24,24,]),'ioStatement':([6,20,37,53,71,],[25,25,25,25,25,]),'returnStatement':([6,20,37,53,71,],[26,26,26,26,26,]),'exitStatement':([6,20,37,53,71,],[27,27,27,27,27,]),'compoundStatement':([6,20,37,51,53,71,84,],[28,28,28,85,28,28,123,]),'callStatement':([6,20,37,53,71,],[29,29,29,29,29,]),'variable_def':([6,20,37,53,55,71,],[30,30,30,30,89,30,]),'testAndThen':([31,],[50,]),'test':([31,],[51,]),'whileExpr':([32,],[53,]),'expr':([35,49,52,54,56,66,72,73,108,109,147,],[57,83,86,88,91,110,114,115,114,143,157,]),'simpleExpr':([35,49,52,54,56,59,66,72,73,95,96,108,109,147,],[58,58,58,58,58,103,58,58,58,129,130,58,58,58,]),'addExpr':([35,49,52,54,56,59,66,72,73,95,96,97,98,99,100,101,102,108,109,147,],[60,60,60,60,60,60,60,60,60,60,60,131,132,133,134,135,136,60,60,60,]),'mulExpr':([35,49,52,54,56,59,66,72,73,95,96,97,98,99,100,101,102,104,105,108,109,147,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,137,138,61,61,61,]),'factor':([35,49,52,54,56,59,66,72,73,95,96,97,98,99,100,101,102,104,105,106,107,108,109,147,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,139,140,62,62,62,]),'variable':([35,49,52,54,56,59,66,72,73,95,96,97,98,99,100,101,102,104,105,106,107,108,109,147,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'constant':([35,49,52,54,56,59,66,72,73,95,96,97,98,99,100,101,102,104,105,106,107,108,109,147,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'paramDeclList':([45,],[79,]),'stringConstant':([56,],[92,]),'argList':([72,108,],[113,142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> procedures','program',1,'p_program_procs','cminus_parser.py',29),
  ('program -> declList procedures','program',2,'p_program_decls','cminus_parser.py',33),
  ('procedures -> procedures procedureDecl','procedures',2,'p_procedures','cminus_parser.py',37),
  ('procedures -> procedureDecl','procedures',1,'p_procedures_decl','cminus_parser.py',41),
  ('declList -> type identifierList SEMICOLON','declList',3,'p_decl','cminus_parser.py',45),
  ('declList -> declList type identifierList SEMICOLON','declList',4,'p_decl_list','cminus_parser.py',49),
  ('procedureDecl -> procedureHead procedureBody','procedureDecl',2,'p_procedure_decl','cminus_parser.py',53),
  ('procedureHead -> functionDecl declList','procedureHead',2,'p_procedure_head_decl','cminus_parser.py',59),
  ('procedureHead -> functionDecl','procedureHead',1,'p_procedure_head','cminus_parser.py',68),
  ('functionDecl -> type IDENTIFIER LPAREN paramDeclList RPAREN LBRACE','functionDecl',6,'p_function_decl','cminus_parser.py',75),
  ('functionDecl -> type IDENTIFIER LPAREN RPAREN LBRACE','functionDecl',5,'p_function_decl_noparam','cminus_parser.py',81),
  ('procedureBody -> statementList RBRACE','procedureBody',2,'p_procedure_body','cminus_parser.py',87),
  ('paramDeclList -> type varDecl','paramDeclList',2,'p_param_decl_list_decl','cminus_parser.py',91),
  ('paramDeclList -> paramDeclList COMMA type varDecl','paramDeclList',4,'p_param_decl_list','cminus_parser.py',95),
  ('identifierList -> varDecl','identifierList',1,'p_id_list_vardecl','cminus_parser.py',99),
  ('identifierList -> identifierList COMMA varDecl','identifierList',3,'p_id_list','cminus_parser.py',103),
  ('varDecl -> IDENTIFIER','varDecl',1,'p_var_decl_id','cminus_parser.py',107),
  ('varDecl -> IDENTIFIER LBRACKET INTCON RBRACKET','varDecl',4,'p_var_decl_array','cminus_parser.py',111),
  ('varDecl -> IDENTIFIER LBRACKET CHARCON RBRACKET','varDecl',4,'p_var_decl_array_char','cminus_parser.py',115),
  ('type -> CHAR','type',1,'p_type_char','cminus_parser.py',119),
  ('type -> INT','type',1,'p_type_int','cminus_parser.py',123),
  ('type -> FLOAT','type',1,'p_type_float','cminus_parser.py',127),
  ('type -> VOID','type',1,'p_type_void','cminus_parser.py',131),
  ('statement -> assignment','statement',1,'p_statement_assignment','cminus_parser.py',135),
  ('statement -> ifStatement','statement',1,'p_statement_if','cminus_parser.py',139),
  ('statement -> whileStatement','statement',1,'p_statement_while','cminus_parser.py',143),
  ('statement -> ioStatement','statement',1,'p_statement_io','cminus_parser.py',147),
  ('statement -> returnStatement','statement',1,'p_statement_returnn','cminus_parser.py',151),
  ('statement -> exitStatement','statement',1,'p_statement_exit','cminus_parser.py',155),
  ('statement -> compoundStatement','statement',1,'p_statement_compound','cminus_parser.py',159),
  ('statement -> callStatement','statement',1,'p_statemet_callStatement','cminus_parser.py',163),
  ('callStatement -> IDENTIFIER LPAREN RPAREN SEMICOLON','callStatement',4,'p_callStatement','cminus_parser.py',167),
  ('callStatement -> IDENTIFIER LPAREN argList RPAREN SEMICOLON','callStatement',5,'p_callStatement_args','cminus_parser.py',171),
  ('assignment -> variable_def ASSIGN expr SEMICOLON','assignment',4,'p_assignment','cminus_parser.py',175),
  ('variable_def -> IDENTIFIER','variable_def',1,'p_variable_def','cminus_parser.py',179),
  ('variable_def -> IDENTIFIER LBRACKET expr RBRACKET','variable_def',4,'p_variable_def_array','cminus_parser.py',183),
  ('ifStatement -> IF testAndThen ELSE compoundStatement','ifStatement',4,'p_if','cminus_parser.py',188),
  ('ifStatement -> IF testAndThen','ifStatement',2,'p_if_then','cminus_parser.py',192),
  ('testAndThen -> test compoundStatement','testAndThen',2,'p_test_then','cminus_parser.py',196),
  ('test -> LPAREN expr RPAREN','test',3,'p_test','cminus_parser.py',200),
  ('whileStatement -> WHILE whileExpr statement','whileStatement',3,'p_while_stmt','cminus_parser.py',204),
  ('whileExpr -> LPAREN expr RPAREN','whileExpr',3,'p_while_expr','cminus_parser.py',208),
  ('ioStatement -> READ LPAREN variable_def RPAREN SEMICOLON','ioStatement',5,'p_read','cminus_parser.py',212),
  ('ioStatement -> WRITE LPAREN expr RPAREN SEMICOLON','ioStatement',5,'p_write_expr','cminus_parser.py',216),
  ('ioStatement -> WRITE LPAREN stringConstant RPAREN SEMICOLON','ioStatement',5,'p_write_str','cminus_parser.py',220),
  ('returnStatement -> RETURN expr SEMICOLON','returnStatement',3,'p_return_stmt','cminus_parser.py',225),
  ('exitStatement -> EXIT SEMICOLON','exitStatement',2,'p_exit_stmt','cminus_parser.py',229),
  ('compoundStatement -> LBRACE statementList RBRACE','compoundStatement',3,'p_compound_stmt','cminus_parser.py',233),
  ('statementList -> statement','statementList',1,'p_stmt_list_stmt','cminus_parser.py',237),
  ('statementList -> statementList statement','statementList',2,'p_stmt_list','cminus_parser.py',241),
  ('expr -> simpleExpr','expr',1,'p_expr','cminus_parser.py',245),
  ('expr -> expr OR simpleExpr','expr',3,'p_expr_or','cminus_parser.py',249),
  ('expr -> expr AND simpleExpr','expr',3,'p_expr_and','cminus_parser.py',253),
  ('expr -> NOT simpleExpr','expr',2,'p_expr_not','cminus_parser.py',257),
  ('simpleExpr -> addExpr','simpleExpr',1,'p_simple_expr','cminus_parser.py',261),
  ('simpleExpr -> simpleExpr EQ addExpr','simpleExpr',3,'p_simple_expr_eq','cminus_parser.py',265),
  ('simpleExpr -> simpleExpr NE addExpr','simpleExpr',3,'p_simple_expr_ne','cminus_parser.py',269),
  ('simpleExpr -> simpleExpr LE addExpr','simpleExpr',3,'p_simple_expr_le','cminus_parser.py',273),
  ('simpleExpr -> simpleExpr LT addExpr','simpleExpr',3,'p_simple_expr_lt','cminus_parser.py',277),
  ('simpleExpr -> simpleExpr GE addExpr','simpleExpr',3,'p_simple_expr_ge','cminus_parser.py',281),
  ('simpleExpr -> simpleExpr GT addExpr','simpleExpr',3,'p_simple_expr_gt','cminus_parser.py',285),
  ('addExpr -> mulExpr','addExpr',1,'p_add_expr','cminus_parser.py',289),
  ('addExpr -> addExpr PLUS mulExpr','addExpr',3,'p_add_expr_plus','cminus_parser.py',293),
  ('addExpr -> addExpr MINUS mulExpr','addExpr',3,'p_add_expr_minus','cminus_parser.py',297),
  ('mulExpr -> factor','mulExpr',1,'p_mul_expr','cminus_parser.py',301),
  ('mulExpr -> mulExpr TIMES factor','mulExpr',3,'p_mul_expr_times','cminus_parser.py',305),
  ('mulExpr -> mulExpr DIVIDE factor','mulExpr',3,'p_mul_expr_div','cminus_parser.py',310),
  ('factor -> variable','factor',1,'p_factor_var','cminus_parser.py',314),
  ('factor -> constant','factor',1,'p_factor_const','cminus_parser.py',318),
  ('factor -> IDENTIFIER LPAREN RPAREN','factor',3,'p_factor_func','cminus_parser.py',322),
  ('factor -> IDENTIFIER LPAREN argList RPAREN','factor',4,'p_factor_func_args','cminus_parser.py',326),
  ('factor -> LPAREN expr RPAREN','factor',3,'p_factor_expr','cminus_parser.py',330),
  ('variable -> IDENTIFIER','variable',1,'p_variable','cminus_parser.py',334),
  ('variable -> IDENTIFIER LBRACKET expr RBRACKET','variable',4,'p_variable_array','cminus_parser.py',338),
  ('stringConstant -> STRING','stringConstant',1,'p_string_const','cminus_parser.py',342),
  ('constant -> FLOATCON','constant',1,'p_float_const','cminus_parser.py',346),
  ('constant -> INTCON','constant',1,'p_int_const','cminus_parser.py',350),
  ('constant -> CHARCON','constant',1,'p_char_const','cminus_parser.py',354),
  ('argList -> expr','argList',1,'p_arg_list_arg','cminus_parser.py',358),
  ('argList -> argList COMMA expr','argList',3,'p_arg_list','cminus_parser.py',363),
]
